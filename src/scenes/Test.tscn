[gd_scene load_steps=6 format=2]

[ext_resource path="res://src/ui/fonts/PatuaOne-Regular.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://src/scenes/Bucket.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var height = ProjectSettings.get_setting(\"display/window/size/height\")
const ORB_BUFFER = 60 # half of orb sprite plus 30

onready var Orb = preload(\"res://src/scenes/Orb.tscn\")
onready var Orb1 = null
onready var Orb2 = null
onready var Orb3 = null
onready var Orbs = [Orb1, Orb2, Orb3]

var question = \"\"
var answers = []
var problems = 10
var hearts = 3

func _draw():
	$Label2.text = \"Hearts: \" + String(hearts)

func _process(delta):
	for i in range(3):
		# if orb has not yet been deleted
		if Orbs[i] != null:
			# if orb has reached the bottom of the screen
			if Orbs[i].position.y + ORB_BUFFER >= height:
				# if orb is correct answer
				if Orbs[i].IsCorrect == 1:
					if hearts == 0:
						problems = 0
						$Label.text = \"Game Over\"
						$Label2.text = \"\"
					else:
						hearts -= 1
						$Label2.text = \"Hearts: \" + String(hearts)
					# delete other orbs if correct orb reaches bottom
					if Orbs[(i+1)%3] != null:
						Orbs[(i+1)%3].queue_free()
						Orbs[(i+1)%3] = null
					if Orbs[(i+2)%3] != null:
						Orbs[(i+2)%3].queue_free()
						Orbs[(i+2)%3] = null
				# delete orb if orb reaches bottom
				Orbs[i].queue_free()
				Orbs[i] = null
	# if all orbs are deleted
	if (Orbs[0] == null) and (Orbs[1] == null) and (Orbs[2] == null):
		# and if there are any remaining problems, generate a new problem
		if problems > 0:
			OrbsSpawner()
			problems -= 1

func OrbsSpawner():
	# seed rand
	randomize()
	
	# randomly get orb positions
	var orb_positions = []
	orb_positions.append((randi() % 352) + 50)
	orb_positions.append((randi() % 356) + 462)
	orb_positions.append((randi() % 352) + 878)
	
	Multiplication()
	
	for i in range(3):
		# instance 3 new orbs
		Orbs[i] = Orb.instance()
		add_child(Orbs[i])
		
		# place orbs into 3 predetermined orb lanes
		Orbs[i].position.x = orb_positions[i]
		
		# randomly assign orbs' speeds
		Orbs[i].speed = (randi() % 51) + 75
		
		# apply answers and correctness status to orbs
		Orbs[i].get_node(\"Sprite/Label\").text = String(answers[i].x)
		Orbs[i].IsCorrect = answers[i].y
	
	$Label.text = question



func Multiplication():
	# seed rand
	randomize()
	
	var temp_answers = []
	
	# get two numbers, each from 0 to 12
	var num1 = randi() % 13
	var num2 = randi() % 13
	var product = num1 * num2
	
	# update question
	question = String(num1) + \" * \" + String(num2)
	
	# generate and update answers
	answers.clear()
	answers.append(Vector2(product, 1))
	for i in range(3):
		temp_answers.append(Vector2(product + (i + 1), 0))
		temp_answers.append(Vector2(product - (i + 1), 0))
	temp_answers.append(Vector2(product + num1, 0))
	temp_answers.append(Vector2(product - num1, 0))
	temp_answers.append(Vector2(product + num2, 0))
	temp_answers.append(Vector2(product - num2, 0))
	temp_answers.shuffle()
	answers.append(temp_answers[0])
	answers.append(temp_answers[1])
	answers.shuffle()
"

[sub_resource type="DynamicFont" id=2]
size = 60
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=3]
size = 30
font_data = ExtResource( 1 )

[node name="Test" type="Node2D"]
script = SubResource( 1 )

[node name="Label" type="Label" parent="."]
margin_right = 1280.0
margin_bottom = 160.0
custom_fonts/font = SubResource( 2 )
custom_colors/font_color = Color( 0.878431, 0.878431, 0.878431, 1 )
align = 1
valign = 1

[node name="Label2" type="Label" parent="."]
margin_left = 20.0
margin_right = 1260.0
margin_bottom = 60.0
custom_fonts/font = SubResource( 3 )
custom_colors/font_color = Color( 0.878431, 0.878431, 0.878431, 1 )
valign = 1

[node name="Bucket" parent="." instance=ExtResource( 2 )]
position = Vector2( 640, 660 )
