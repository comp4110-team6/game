[gd_scene load_steps=8 format=2]

[ext_resource path="res://src/scenes/TitleScreen.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/scenes/OptionsScreen.tscn" type="PackedScene" id=2]
[ext_resource path="res://src/scenes/QuitScreen.tscn" type="PackedScene" id=3]
[ext_resource path="res://src/scenes/StageSelectScreen.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/scenes/UserEntryScreen.tscn" type="PackedScene" id=5]
[ext_resource path="res://src/scenes/Music.tscn" type="PackedScene" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

onready var ScreenState = get_node(\"/root/Game/TitleScreen\")
onready var LastScreenState = get_node(\"/root/Game/TitleScreen\")

func updateScreenState(path):
	LastScreenState = ScreenState
	LastScreenState.visible = false
	ScreenState = path
	ScreenState.visible = true

func _input(event):
	if event.is_action_pressed(\"ui_cancel\"):
		if ScreenState == get_node(\"/root/Game/TitleScreen\"):
			updateScreenState(get_node(\"/root/Game/QuitScreen\"))
		elif ScreenState == get_node(\"/root/Game/StageSelectScreen\") || \\
		ScreenState == get_node(\"/root/Game/OptionsScreen\") || \\
		ScreenState == get_node(\"/root/Game/QuitScreen\"):
			updateScreenState(get_node(\"/root/Game/TitleScreen\"))
		else:
			updateScreenState(LastScreenState)

# Generation of level select screens
onready var LevelSelectScreen = preload(\"res://src/scenes/LevelSelectScreen.tscn\")
onready var LevelSelectScreen1 = LevelSelectScreen.instance()
onready var LevelSelectScreen2 = LevelSelectScreen.instance()
onready var LevelSelectScreen3 = LevelSelectScreen.instance()
onready var LevelSelectScreen4 = LevelSelectScreen.instance()
onready var LevelSelectScreen5 = LevelSelectScreen.instance()
onready var LevelSelectScreens = [LevelSelectScreen1, LevelSelectScreen2, LevelSelectScreen3, LevelSelectScreen4, LevelSelectScreen5]
onready var star_gray = preload(\"res://src/ui/star_yellow.png\")

#func generateLevelSelectScreen1():
#	add_child(LevelSelectScreen1)
#	LevelSelectScreen1.visible = false
#	LevelSelectScreen1.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/Back\")\\
#	.connect(\"pressed\", self, \"_on_LevelSelectScreen1Back_pressed\")
#	$StageSelectScreen.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Stage1/Button\")\\
#	.connect(\"pressed\", self, \"_on_StageSelectScreenStage1_pressed\")
#	LevelSelectScreen1.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer/Label\").text = \"Stage 1\"
#	ConfigurationSystem.loadStageScores(1)
#	var tempScore = ConfigurationSystem.Stage1Scores
#	var tempPath
#	for i in range(3):
#		tempPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer/HBoxContainer/Star\"
#		if tempScore[i] >= 33:
#			LevelSelectScreen1.get_node(tempPath + \"1\").visible = true
#		if tempScore[i] >= 67:
#			LevelSelectScreen1.get_node(tempPath + \"2\").visible = true
#		if tempScore[i] == 100:
#			LevelSelectScreen1.get_node(tempPath + \"3\").visible = true
#		LevelSelectScreen1.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\")\\
#		.connect(\"pressed\", self, \"_on_Stage1Level\" + String(i+1) + \"_pressed\")
#		LevelSelectScreen1.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\").text = \"Level \" + String(i+1)

func generateLevelSelectScreens():
	for x in range(5):
		var temp
		add_child(LevelSelectScreens[x])
		LevelSelectScreens[x].visible = false
		LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/Back\") \\
		.connect(\"pressed\", self, \"_on_LevelSelectScreen\" + String(x+1) + \"Back_pressed\")
		 # Used to get names of HBoxContainers within level select, can be optimized by renaming HBoxContainer to something more meaningful
		if x == 0 || x == 1 || x == 2:
			temp = \"1\"				   # TODO: Fix this ugly code
		else:
			temp = \"2\"
		$StageSelectScreen.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer\" + temp + \"/Stage\" + String(x+1) + \"/Button\")\\
		.connect(\"pressed\", self, \"_on_StageSelectScreenStage\" + String(x+1) + \"_pressed\")
		LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer/Label\").text = \"Stage \" + String(x+1)
		ConfigurationSystem.loadStageScores(x+1)
		var tempScore = ConfigurationSystem.Scores[x]
		var tempPath
		# The following loop displays stars based on the score for that level.
		for i in range(3):
			tempPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/HBoxContainer/Star\"
			if tempScore[i] >= 33:
				LevelSelectScreens[x].get_node(tempPath + \"1\").set_texture(star_gray)
			if tempScore[i] >= 67:
				LevelSelectScreens[x].get_node(tempPath + \"2\").set_texture(star_gray)
			if tempScore[i] == 100:
				LevelSelectScreens[x].get_node(tempPath + \"3\").set_texture(star_gray)
			LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\")\\
			.connect(\"pressed\", self, \"_on_Stage\" + String(x+1) + \"Level\" + String(i+1) + \"_pressed\")
			LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\").text = \"Level \" + String(i+1)

# Navigate into level select from each stage select
func _on_StageSelectScreenStage1_pressed():
	updateScreenState(LevelSelectScreens[0])
func _on_StageSelectScreenStage2_pressed():
	updateScreenState(LevelSelectScreens[1])
func _on_StageSelectScreenStage3_pressed():
	updateScreenState(LevelSelectScreens[2])
func _on_StageSelectScreenStage4_pressed():
	updateScreenState(LevelSelectScreens[3])
func _on_StageSelectScreenStage5_pressed():
	updateScreenState(LevelSelectScreens[4])

# Navigate back to stage select from level
func _on_LevelSelectScreen1Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen2Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen3Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen4Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen5Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))

#TODO: Add level implementation here
func _on_Stage1Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage1Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage1Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage2Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage2Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage2Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage3Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage3Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage3Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage4Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage4Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage4Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage5Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage5Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage5Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))

func _draw():
	ScreenState.visible = true
	$OptionsScreen.visible = false
	$QuitScreen.visible = false
	$StageSelectScreen.visible = false
	$UserEntryScreen.visible = false
	generateLevelSelectScreens()


func _on_TitleScreenStart_pressed():
	if ConfigurationSystem.User == \"\": # If no user exists, bring them to user creation screen, else bring them to stage select
		updateScreenState(get_node(\"/root/Game/UserEntryScreen\"))
	else:
		updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))

func _on_TitleScreenOptions_pressed():
	updateScreenState(get_node(\"/root/Game/OptionsScreen\"))

func _on_TitleScreenQuit_pressed():
	updateScreenState(get_node(\"/root/Game/QuitScreen\"))


func _on_OptionsScreenChangeName_pressed():
	updateScreenState(get_node(\"/root/Game/UserEntryScreen\"))

func _on_OptionsScreenBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))

func _on_OptionsScreenSFXSlider_ready():
	ConfigurationSystem.loadSFXVolume()
	var tempSFXVolume = ConfigurationSystem.SFXVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider.value = tempSFXVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/Label2.text = String(tempSFXVolume * 100)

func _on_OptionsScreenSFXSlider_value_changed(value):
	ConfigurationSystem.SFXVolume = value / 100
	ConfigurationSystem.saveSFXVolume()
	var tempSFXVolume = ConfigurationSystem.SFXVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider.value = tempSFXVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/Label2.text = String(tempSFXVolume * 100)
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index(\"SFX\"), linear2db(tempSFXVolume))

func _on_OptionsScreenMusicSlider_ready():
	ConfigurationSystem.loadMusicVolume()
	var tempMusicVolume = ConfigurationSystem.MusicVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider.value = tempMusicVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/Label2.text = String(tempMusicVolume * 100)

func _on_OptionsScreenMusicSlider_value_changed(value):
	ConfigurationSystem.MusicVolume = value / 100
	ConfigurationSystem.saveMusicVolume()
	var tempMusicVolume = ConfigurationSystem.MusicVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider.value = tempMusicVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/Label2.text = String(tempMusicVolume * 100)
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index(\"Music\"), linear2db(tempMusicVolume))


func _on_QuitScreenYes_pressed():
	get_tree().quit()

func _on_QuitScreenBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_StageSelectBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_UserEntryScreenBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_UserEntryApply_pressed():
	if LastScreenState == get_node(\"/root/Game/TitleScreen\"):
		updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
"

[node name="Game" type="Node2D"]
script = SubResource( 1 )

[node name="TitleScreen" parent="." instance=ExtResource( 1 )]
editor/display_folded = true
visible = false

[node name="OptionsScreen" parent="." instance=ExtResource( 2 )]
editor/display_folded = true
visible = false

[node name="Label" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title" index="0"]
margin_right = 400.0

[node name="QuitScreen" parent="." instance=ExtResource( 3 )]
editor/display_folded = true
visible = false

[node name="StageSelectScreen" parent="." instance=ExtResource( 4 )]
editor/display_folded = true
visible = false

[node name="UserEntryScreen" parent="." instance=ExtResource( 5 )]
editor/display_folded = true
visible = false

[node name="LineEdit" parent="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer2" index="0"]
max_length = 20

[node name="Music" parent="." instance=ExtResource( 6 )]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Start" to="." method="_on_TitleScreenStart_pressed"]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Options" to="." method="_on_TitleScreenOptions_pressed"]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Quit" to="." method="_on_TitleScreenQuit_pressed"]
[connection signal="ready" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider" to="." method="_on_OptionsScreenSFXSlider_ready"]
[connection signal="value_changed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider" to="." method="_on_OptionsScreenSFXSlider_value_changed"]
[connection signal="ready" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider" to="." method="_on_OptionsScreenMusicSlider_ready"]
[connection signal="value_changed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider" to="." method="_on_OptionsScreenMusicSlider_value_changed"]
[connection signal="pressed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/ChangeName" to="." method="_on_OptionsScreenChangeName_pressed"]
[connection signal="pressed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Back" to="." method="_on_OptionsScreenBack_pressed"]
[connection signal="pressed" from="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Yes" to="." method="_on_QuitScreenYes_pressed"]
[connection signal="pressed" from="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back" to="." method="_on_QuitScreenBack_pressed"]
[connection signal="pressed" from="StageSelectScreen/CenteredContainer/HBoxContainer/VBoxContainer/Button" to="." method="_on_StageSelectBack_pressed"]
[connection signal="pressed" from="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Apply" to="." method="_on_UserEntryApply_pressed"]
[connection signal="pressed" from="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back" to="." method="_on_UserEntryScreenBack_pressed"]

[editable path="TitleScreen"]

[editable path="TitleScreen/CenteredContainer"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Start"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Options"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Quit"]

[editable path="OptionsScreen"]

[editable path="OptionsScreen/CenteredContainer"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Back"]

[editable path="QuitScreen"]

[editable path="QuitScreen/CenteredContainer"]

[editable path="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Yes"]

[editable path="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back"]

[editable path="StageSelectScreen"]

[editable path="StageSelectScreen/CenteredContainer"]

[editable path="UserEntryScreen"]

[editable path="UserEntryScreen/CenteredContainer"]

[editable path="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer"]
