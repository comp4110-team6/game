[gd_scene load_steps=10 format=2]

[ext_resource path="res://src/backgrounds/1.png" type="Texture" id=1]
[ext_resource path="res://src/scenes/TitleScreen.tscn" type="PackedScene" id=2]
[ext_resource path="res://src/scenes/HelpScreen.tscn" type="PackedScene" id=3]
[ext_resource path="res://src/scenes/OptionsScreen.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/scenes/QuitScreen.tscn" type="PackedScene" id=5]
[ext_resource path="res://src/scenes/StageSelectScreen.tscn" type="PackedScene" id=6]
[ext_resource path="res://src/scenes/UserEntryScreen.tscn" type="PackedScene" id=7]
[ext_resource path="res://src/scenes/Music.tscn" type="PackedScene" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

onready var ScreenState = get_node(\"/root/Game/TitleScreen\")
onready var LastScreenState = get_node(\"/root/Game/TitleScreen\")

func updateScreenState(path):
	LastScreenState = ScreenState
	LastScreenState.visible = false
	ScreenState = path
	ScreenState.visible = true

func _input(event):
	if event.is_action_pressed(\"ui_cancel\"):
		if (CurrentLevel != null) and (ScreenState == get_node(\"/root/Game/Level\")):
			pass
		elif ScreenState == get_node(\"/root/Game/TitleScreen\"):
			updateScreenState(get_node(\"/root/Game/QuitScreen\"))
		elif ScreenState == get_node(\"/root/Game/StageSelectScreen\") || \\
		ScreenState == get_node(\"/root/Game/OptionsScreen\") || \\
		ScreenState == get_node(\"/root/Game/QuitScreen\"):
			updateScreenState(get_node(\"/root/Game/TitleScreen\"))
		else:
			updateScreenState(LastScreenState)

func _process(delta):
	if CurrentLevel != null:
		if CurrentLevel.exit == true:
			for i in range(3):
				if CurrentLevel.Orbs[i] != null:
					CurrentLevel.DeleteOrbSelf(i)
			updateScreenState(LastScreenState)
			LastScreenState = get_node(\"/root/Game/StageSelectScreen\")
			deleteCurrentLevel()
		elif CurrentLevel.done == true:
			var temp_x = ConfigurationSystem.Scores[CurrentLevel.stage - 1].x
			var temp_y = ConfigurationSystem.Scores[CurrentLevel.stage - 1].y
			var temp_z = ConfigurationSystem.Scores[CurrentLevel.stage - 1].z
			var temps = Vector3(temp_x, temp_y, temp_z)
			if CurrentLevel.score > temps[CurrentLevel.level - 1]:
				temps[CurrentLevel.level - 1] = CurrentLevel.score
			ConfigurationSystem.Scores[CurrentLevel.stage - 1] = temps
			ConfigurationSystem.saveStageScores(CurrentLevel.stage)
			updateStars(CurrentLevel.stage - 1, CurrentLevel.level - 1)
			updateUnlocking()
			updateScreenState(LastScreenState)
			LastScreenState = get_node(\"/root/Game/StageSelectScreen\")
			deleteCurrentLevel()

# Generation of level select screens
onready var LevelSelectScreen = preload(\"res://src/scenes/LevelSelectScreen.tscn\")
onready var LevelSelectScreen1 = null
onready var LevelSelectScreen2 = null
onready var LevelSelectScreen3 = null
onready var LevelSelectScreen4 = null
onready var LevelSelectScreens = [LevelSelectScreen1, LevelSelectScreen2, LevelSelectScreen3, LevelSelectScreen4]
onready var star_gray = preload(\"res://src/ui/star_gray.png\")
onready var star_yellow = preload(\"res://src/ui/star_yellow.png\")

func generateLevelSelectScreens():
	for x in range(4):
		var temp
		LevelSelectScreens[x] = LevelSelectScreen.instance()
		add_child(LevelSelectScreens[x])
		LevelSelectScreens[x].visible = false
		LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/Back\") \\
		.connect(\"pressed\", self, \"_on_LevelSelectScreen\" + String(x+1) + \"Back_pressed\")
		 # Used to get names of HBoxContainers within level select, can be optimized by renaming HBoxContainer to something more meaningful
		if x == 0 || x == 1:
			temp = \"1\"				   # TODO: Fix this ugly code
		else:
			temp = \"2\"
		$StageSelectScreen.get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer\" + temp + \"/Stage\" + String(x+1) + \"/Button\")\\
		.connect(\"pressed\", self, \"_on_StageSelectScreenStage\" + String(x+1) + \"_pressed\")
		LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer/Label\").text = \"Stage \" + String(x+1)
		# The following loop displays stars based on the score for that level.
		for i in range(3):
			updateStars(x,i)
			LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\")\\
			.connect(\"pressed\", self, \"_on_Stage\" + String(x+1) + \"Level\" + String(i+1) + \"_pressed\")
			LevelSelectScreens[x].get_node(\"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(i+1) + \"/MarginContainer2/Button\").text = \"Level \" + String(i+1)
	updateUnlocking()

func updateStars(stage_index, level_index):
	ConfigurationSystem.loadStageScores(stage_index+1)
	var tempScore = ConfigurationSystem.Scores[stage_index]
	var tempPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel\" + String(level_index+1) + \"/HBoxContainer/Star\"
	LevelSelectScreens[stage_index].get_node(tempPath + \"1\").set_texture(star_gray)
	LevelSelectScreens[stage_index].get_node(tempPath + \"2\").set_texture(star_gray)
	LevelSelectScreens[stage_index].get_node(tempPath + \"3\").set_texture(star_gray)
	var threshold1
	var threshold2
	var threshold3
	if level_index == 0:
		threshold1 = 10
		threshold2 = 20
		threshold3 = 30
	elif level_index == 1:
		threshold1 = 13
		threshold2 = 27
		threshold3 = 40
	elif level_index == 2:
		threshold1 = 17
		threshold2 = 33
		threshold3 = 50
	if tempScore[level_index] >= threshold1:
		LevelSelectScreens[stage_index].get_node(tempPath + \"1\").set_texture(star_yellow)
	if tempScore[level_index] >= threshold2:
		LevelSelectScreens[stage_index].get_node(tempPath + \"2\").set_texture(star_yellow)
	if tempScore[level_index] == threshold3:
		LevelSelectScreens[stage_index].get_node(tempPath + \"3\").set_texture(star_yellow)

func updateUnlocking():
	ConfigurationSystem.loadScores()
	var temp
	var stage2ButtonPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer1/Stage2/Button\"
	var stage3ButtonPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer2/Stage3/Button\"
	var stage4ButtonPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer2/Stage4/Button\"
	var stageButtonPaths = [stage2ButtonPath, stage3ButtonPath, stage4ButtonPath]	
	var level2ButtonPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel2/MarginContainer2/Button\"
	var level3ButtonPath = \"CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Panel3/MarginContainer2/Button\"
	var levelButtonPaths = [level2ButtonPath, level3ButtonPath]	
	for i in range(3):
		$StageSelectScreen.get_node(stageButtonPaths[i]).disabled = true
		temp = ConfigurationSystem.Scores[i]
		if (temp.x >= 20) and (temp.y >= 27) and (temp.z >= 33):
			$StageSelectScreen.get_node(stageButtonPaths[i]).disabled = false
	for i in range(4):
		LevelSelectScreens[i].get_node(levelButtonPaths[0]).disabled = true
		LevelSelectScreens[i].get_node(levelButtonPaths[1]).disabled = true
		temp = ConfigurationSystem.Scores[i]
		if temp.x >= 10:
			LevelSelectScreens[i].get_node(levelButtonPaths[0]).disabled = false
		if temp.y >= 13:
			LevelSelectScreens[i].get_node(levelButtonPaths[1]).disabled = false

# Navigate into level select from each stage select
func _on_StageSelectScreenStage1_pressed():
	updateScreenState(LevelSelectScreens[0])
func _on_StageSelectScreenStage2_pressed():
	updateScreenState(LevelSelectScreens[1])
func _on_StageSelectScreenStage3_pressed():
	updateScreenState(LevelSelectScreens[2])
func _on_StageSelectScreenStage4_pressed():
	updateScreenState(LevelSelectScreens[3])

# Navigate back to stage select from level
func _on_LevelSelectScreen1Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen2Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen3Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
func _on_LevelSelectScreen4Back_pressed():
	updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))

#TODO: Add level implementation here
func _on_Stage1Level1_pressed():
	generateCurrentLevel(1,1)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage1Level2_pressed():
	generateCurrentLevel(1,2)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage1Level3_pressed():
	generateCurrentLevel(1,3)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage2Level1_pressed():
	generateCurrentLevel(2,1)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage2Level2_pressed():
	generateCurrentLevel(2,2)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage2Level3_pressed():
	generateCurrentLevel(2,3)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage3Level1_pressed():
	generateCurrentLevel(3,1)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage3Level2_pressed():
	generateCurrentLevel(3,2)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage3Level3_pressed():
	generateCurrentLevel(3,3)
	updateScreenState(get_node(\"/root/Game/Level\"))
func _on_Stage4Level1_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage4Level2_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))
func _on_Stage4Level3_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))

# Generation of level
onready var Level = preload(\"res://src/scenes/Level.tscn\")
onready var CurrentLevel = null

func generateCurrentLevel(stage, level):
	var temp
	CurrentLevel = Level.instance()
	add_child(CurrentLevel)
	ConfigurationSystem.loadStageScores(stage)
	CurrentLevel.stage = stage
	CurrentLevel.level = level

func deleteCurrentLevel():
	CurrentLevel.queue_free()
	CurrentLevel = null

func _draw():
	ScreenState.visible = true
	$OptionsScreen.visible = false
	$QuitScreen.visible = false
	$StageSelectScreen.visible = false
	$UserEntryScreen.visible = false
	generateLevelSelectScreens()


func _on_TitleScreenStart_pressed():
	if ConfigurationSystem.User == \"\":
		$HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Continue.visible = true
		updateScreenState(get_node(\"/root/Game/HelpScreen\"))
	else:
		updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))

func _on_TitleScreenHelp_pressed():
	updateScreenState(get_node(\"/root/Game/HelpScreen\"))

func _on_TitleScreenOptions_pressed():
	updateScreenState(get_node(\"/root/Game/OptionsScreen\"))

func _on_TitleScreenQuit_pressed():
	updateScreenState(get_node(\"/root/Game/QuitScreen\"))


func _on_HelpScreenContinue_pressed():
	$HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Continue.visible = false
	updateScreenState(get_node(\"/root/Game/UserEntryScreen\"))

func _on_HelpScreenBack_pressed():
	$HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Continue.visible = false
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_OptionsScreenChangeName_pressed():
	updateScreenState(get_node(\"/root/Game/UserEntryScreen\"))

func _on_OptionsScreenBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))

func _on_OptionsScreenSFXSlider_ready():
	ConfigurationSystem.loadSFXVolume()
	var tempSFXVolume = ConfigurationSystem.SFXVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider.value = tempSFXVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/Label2.text = String(tempSFXVolume * 100)

func _on_OptionsScreenSFXSlider_value_changed(value):
	ConfigurationSystem.SFXVolume = value / 100
	ConfigurationSystem.saveSFXVolume()
	var tempSFXVolume = ConfigurationSystem.SFXVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider.value = tempSFXVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/Label2.text = String(tempSFXVolume * 100)
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index(\"SFX\"), linear2db(tempSFXVolume))

func _on_OptionsScreenMusicSlider_ready():
	ConfigurationSystem.loadMusicVolume()
	var tempMusicVolume = ConfigurationSystem.MusicVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider.value = tempMusicVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/Label2.text = String(tempMusicVolume * 100)

func _on_OptionsScreenMusicSlider_value_changed(value):
	ConfigurationSystem.MusicVolume = value / 100
	ConfigurationSystem.saveMusicVolume()
	var tempMusicVolume = ConfigurationSystem.MusicVolume
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider.value = tempMusicVolume * 100
	$OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/Label2.text = String(tempMusicVolume * 100)
	AudioServer.set_bus_volume_db(AudioServer.get_bus_index(\"Music\"), linear2db(tempMusicVolume))


func _on_QuitScreenYes_pressed():
	get_tree().quit()

func _on_QuitScreenBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_StageSelectBack_pressed():
	updateScreenState(get_node(\"/root/Game/TitleScreen\"))


func _on_UserEntryScreenBack_pressed():
	updateScreenState(LastScreenState)


func _on_UserEntryApply_pressed():
	if LastScreenState == get_node(\"/root/Game/HelpScreen\"):
		updateScreenState(get_node(\"/root/Game/StageSelectScreen\"))
"

[node name="Game" type="Node2D"]
script = SubResource( 1 )

[node name="TextureRect" type="TextureRect" parent="."]
margin_right = 1280.0
margin_bottom = 720.0
rect_scale = Vector2( 0.667, 0.667 )
size_flags_horizontal = 4
size_flags_vertical = 4
texture = ExtResource( 1 )

[node name="TitleScreen" parent="." instance=ExtResource( 2 )]
editor/display_folded = true
visible = false

[node name="HelpScreen" parent="." instance=ExtResource( 3 )]
visible = false

[node name="OptionsScreen" parent="." instance=ExtResource( 4 )]
editor/display_folded = true
visible = false

[node name="VBoxContainer" parent="OptionsScreen/CenteredContainer/HBoxContainer" index="0"]
margin_left = 440.0
margin_right = 840.0

[node name="Title" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="0"]
margin_top = 230.0
margin_right = 400.0
margin_bottom = 290.0

[node name="Label" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title" index="0"]
margin_right = 400.0

[node name="SFX" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="1"]
margin_top = 305.0
margin_right = 400.0
margin_bottom = 335.0

[node name="Label" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX" index="0"]
margin_right = 171.0

[node name="HSlider" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX" index="1"]
margin_left = 175.0
margin_right = 346.0

[node name="Label2" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX" index="2"]
margin_left = 350.0
margin_right = 400.0

[node name="Music" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="2"]
margin_right = 400.0
margin_bottom = 380.0

[node name="Label" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music" index="0"]
margin_right = 171.0

[node name="HSlider" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music" index="1"]
margin_left = 175.0
margin_right = 346.0

[node name="Label2" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music" index="2"]
margin_left = 350.0
margin_right = 400.0

[node name="ChangeName" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="3"]
margin_left = 120.0
margin_top = 395.0
margin_right = 280.0
margin_bottom = 435.0

[node name="Back" parent="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="4"]
margin_left = 120.0
margin_top = 450.0
margin_right = 280.0
margin_bottom = 490.0

[node name="QuitScreen" parent="." instance=ExtResource( 5 )]
editor/display_folded = true
visible = false

[node name="Text" parent="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="0"]
margin_top = 317.0
margin_bottom = 347.0

[node name="HBoxContainer" parent="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer" index="1"]
margin_top = 362.0
margin_bottom = 402.0

[node name="StageSelectScreen" parent="." instance=ExtResource( 6 )]
editor/display_folded = true
visible = false

[node name="UserEntryScreen" parent="." instance=ExtResource( 7 )]
editor/display_folded = true
visible = false

[node name="LineEdit" parent="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer2" index="0"]
max_length = 20

[node name="Music" parent="." instance=ExtResource( 8 )]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Start" to="." method="_on_TitleScreenStart_pressed"]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Help" to="." method="_on_TitleScreenHelp_pressed"]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Options" to="." method="_on_TitleScreenOptions_pressed"]
[connection signal="pressed" from="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Quit" to="." method="_on_TitleScreenQuit_pressed"]
[connection signal="pressed" from="HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Continue" to="." method="_on_HelpScreenContinue_pressed"]
[connection signal="pressed" from="HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back" to="." method="_on_HelpScreenBack_pressed"]
[connection signal="ready" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider" to="." method="_on_OptionsScreenSFXSlider_ready"]
[connection signal="value_changed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX/HSlider" to="." method="_on_OptionsScreenSFXSlider_value_changed"]
[connection signal="ready" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider" to="." method="_on_OptionsScreenMusicSlider_ready"]
[connection signal="value_changed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music/HSlider" to="." method="_on_OptionsScreenMusicSlider_value_changed"]
[connection signal="pressed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/ChangeName" to="." method="_on_OptionsScreenChangeName_pressed"]
[connection signal="pressed" from="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Back" to="." method="_on_OptionsScreenBack_pressed"]
[connection signal="pressed" from="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Yes" to="." method="_on_QuitScreenYes_pressed"]
[connection signal="pressed" from="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back" to="." method="_on_QuitScreenBack_pressed"]
[connection signal="pressed" from="StageSelectScreen/CenteredContainer/HBoxContainer/VBoxContainer/Button" to="." method="_on_StageSelectBack_pressed"]
[connection signal="pressed" from="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Apply" to="." method="_on_UserEntryApply_pressed"]
[connection signal="pressed" from="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back" to="." method="_on_UserEntryScreenBack_pressed"]

[editable path="TitleScreen"]

[editable path="TitleScreen/CenteredContainer"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Start"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Options"]

[editable path="TitleScreen/CenteredContainer/HBoxContainer/VBoxContainer/Quit"]

[editable path="HelpScreen"]

[editable path="HelpScreen/CenteredContainer"]

[editable path="HelpScreen/CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer"]

[editable path="OptionsScreen"]

[editable path="OptionsScreen/CenteredContainer"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Title"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/SFX"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Music"]

[editable path="OptionsScreen/CenteredContainer/HBoxContainer/VBoxContainer/Back"]

[editable path="QuitScreen"]

[editable path="QuitScreen/CenteredContainer"]

[editable path="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Yes"]

[editable path="QuitScreen/CenteredContainer/HBoxContainer/VBoxContainer/HBoxContainer/Back"]

[editable path="StageSelectScreen"]

[editable path="StageSelectScreen/CenteredContainer"]

[editable path="UserEntryScreen"]

[editable path="UserEntryScreen/CenteredContainer"]

[editable path="UserEntryScreen/CenteredContainer/HBoxContainer/VBoxContainer/MarginContainer"]
